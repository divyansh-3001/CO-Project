registers = {format(i, '05b'): f"x{i}" for i in range(32)}
opcode_dict = {
    'R': ['0110011'], 'I': ['0010011', '0000011', '1100111'], 
    'S': ['0100011'], 'B': ['1100011'], 'U': ['0110111'], 'J': ['1101111']
}
instruction_info = {
    "ADD": {"opcode": "0110011", "funct3": "000", "funct7": "0000000"},
    "SUB": {"opcode": "0110011", "funct3": "000", "funct7": "0100000"},
    "AND": {"opcode": "0110011", "funct3": "111", "funct7": "0000000"},
    "OR": {"opcode": "0110011", "funct3": "110", "funct7": "0000000"},
    "SLT": {"opcode": "0110011", "funct3": "010", "funct7": "0000000"},
    "SRL": {"opcode": "0110011", "funct3": "101", "funct7": "0000000"},
    "LW": {"opcode": "0000011", "funct3": "010"},
    "SW": {"opcode": "0100011", "funct3": "010"},
    "ADDI": {"opcode": "0010011", "funct3": "000"},
    "JALR": {"opcode": "1100111", "funct3": "000"},
    "BEQ": {"opcode": "1100011", "funct3": "000"},
    "BNE": {"opcode": "1100011", "funct3": "001"},
    "JAL": {"opcode": "1101111"}
}


riscv_register = {f"x{i}": 0 for i in range(32)}
riscv_register["x2"] = 380  # Stack pointer


memory = {
    0x00010000 + i * 4: 0 for i in range(32)
}
import re

def read_file(filepath):
    with open(filepath, 'r') as file:
        return [line.strip() for line in file.readlines() if line.strip()]

def write_file(filepath, lines):
    with open(filepath, 'w') as file:
        for line in lines:
            file.write(line + '\n')

def instruction_type(binary_instr):
    opcode = binary_instr[-7:]
    for instr_type, opcodes in opcode_dict.items():
        if opcode in opcodes:
            return instr_type
    return None

def decode_instruction(binary_instr):
    instr_type = instruction_type(binary_instr)
    
    # Check for invalid opcode
    if instr_type is None:
        opcode = binary_instr[-7:]
        raise ValueError(f"Error: Invalid opcode {opcode} in instruction {binary_instr}")
    
    opcode = binary_instr[-7:]
    funct3 = binary_instr[17:20] if instr_type in {'R', 'I', 'S', 'B'} else None
    funct7 = binary_instr[:7] if instr_type == 'R' else None
    rd = binary_instr[20:25] if instr_type in {'R', 'I', 'U', 'J'} else None
    rs1 = binary_instr[12:17] if instr_type in {'R', 'I', 'S', 'B'} else None
    rs2 = binary_instr[7:12] if instr_type in {'R', 'S', 'B'} else None
    imm = extract_immediate(binary_instr, instr_type)

    decoded_instr = match_instruction(instr_type, opcode, funct3, funct7)
    
    # Check for invalid combinations of opcode, funct3, funct7
    if decoded_instr == "no_match_instruction":
        raise ValueError(f"Error: Invalid combination of opcode={opcode}, funct3={funct3}, funct7={funct7}")
    
    if decoded_instr:
        return format_decoded_instruction(decoded_instr, rd, rs1, rs2, imm)
    
    return "Unknown Instruction"

def extract_immediate(binary_instr, instr_type):
    if instr_type == 'I': 
        return sign_extend(binary_instr[:12], 12)
    elif instr_type == 'S':  
        return sign_extend(binary_instr[:7] + binary_instr[20:25], 12)
    elif instr_type == 'B': 
        return sign_extend(binary_instr[0] + binary_instr[24] + binary_instr[1:7] + binary_instr[20:24] + '0', 13)
    elif instr_type == 'J': 
        return sign_extend(binary_instr[0] + binary_instr[12:20] + binary_instr[11] + binary_instr[1:11] + '0', 21)
    return "No immediate"

def sign_extend(value, bits):
    num = int(value, 2) 
    
    if value[0] == '1':
        num -= (1 << bits)  
    
    return num


def match_instruction(instr_type, opcode, funct3, funct7):
    for instr, details in instruction_info.items():
        if (details['opcode'] == opcode and 
            (funct3 is None or details.get('funct3') == funct3) and 
            (funct7 is None or details.get('funct7') == funct7)):
            return instr
    return "no_match_instruction"

def format_decoded_instruction(instr, rd, rs1, rs2, imm):
    if instr in {'ADD', 'SUB', 'AND', 'OR', 'SLT', 'SRL'}:
        return f"{instr.lower()} {registers[rd]}, {registers[rs1]}, {registers[rs2]}"
    elif instr in {'LW'}:
        return f"{instr.lower()} {registers[rd]}, {imm}({registers[rs1]})"
    elif instr in {'SW'}:
        return f"{instr.lower()} {registers[rs2]}, {imm}({registers[rs1]})"
    elif instr in {'ADDI'}:
        return f"{instr.lower()} {registers[rd]}, {registers[rs1]}, {imm}"
    elif instr in {'JALR'}:
        return f"{instr.lower()} {registers[rd]}, {registers[rs1]}, {imm}"
    elif instr in {'BEQ', 'BNE'}:
        return f"{instr.lower()} {registers[rs1]}, {registers[rs2]}, {imm}"
    elif instr == 'JAL':
        return f"{instr.lower()} {registers[rd]}, {imm}"
    return "Unknown Instruction"

def detect_halt(parts):
    return parts[0] == "beq" and parts[1] == "x0" and parts[2] == "x0" and parts[3] == "0"

def calculate_pc(pc, parts):
    op = parts[0]
    new_pc = pc + 4  #  move to next instruction if there is offset value
    
    if op == "beq" and riscv_register[parts[1]] == riscv_register[parts[2]]:
        new_pc = pc + int(parts[3])
    elif op == "bne" and riscv_register[parts[1]] != riscv_register[parts[2]]:
        new_pc = pc + int(parts[3])
    elif op == "jal":
        riscv_register[parts[1]] = pc + 4
        new_pc = pc + int(parts[2])
    elif op == "jalr":
        if parts[1] != "x0":
            riscv_register[parts[1]] = pc + 4
        new_pc = (riscv_register[parts[2]] + int(parts[3])) & ~1
    

    if new_pc % 4 != 0:
        raise ValueError(f"Error: PC update to address {new_pc} is not a multiple of four")
        
    return new_pc

def to_binary_32bit(value): #using this from our previous assembler project
    if value < 0:
        value = (1 << 32) + value
    
    return f"0b{value:032b}"


def is_valid_memory_address(address):
    
    if not isinstance(address, int): 
        return False

    # Data memory range
    data_memory_start = 0x00010000
    data_memory_end = 0x0001007C

    return data_memory_start <= address <= data_memory_end

def execute_instruction(instruction, pc):
    parts = re.split(r'[ ,\(\)\s]+', instruction)
    parts = [p for p in parts if p]  # Remove empty strings

    if detect_halt(parts):
        return None  # Stop execution

    new_pc = calculate_pc(pc, parts)
    op = parts[0]

    if op == "add":
        riscv_register[parts[1]] = riscv_register[parts[2]] + riscv_register[parts[3]]
    elif op == "sub":
        riscv_register[parts[1]] = riscv_register[parts[2]] - riscv_register[parts[3]]
    elif op == "slt":
        riscv_register[parts[1]] = int(riscv_register[parts[2]] < riscv_register[parts[3]])
    elif op == "srl":
        riscv_register[parts[1]] = riscv_register[parts[2]] >> (riscv_register[parts[3]] & 0x1F)
    elif op == "or":
        riscv_register[parts[1]] = riscv_register[parts[2]] | riscv_register[parts[3]]
    elif op == "and":
        riscv_register[parts[1]] = riscv_register[parts[2]] & riscv_register[parts[3]]
    elif op == "addi":
        riscv_register[parts[1]] = riscv_register[parts[2]] + int(parts[3])
    elif op == "lw":
        address = riscv_register[parts[2]] + int(parts[3])
        
        # Check for memory access violation
        if not is_valid_memory_address(address):
            raise ValueError(f"Error: Data read from invalid memory location 0x{address:08X}")
            
        if address not in memory:  
            available_addr = get_available_memory()
            if available_addr is not None:
                memory[address] = memory[available_addr]
                memory[available_addr] = 0 
        riscv_register[parts[1]] = memory.get(address, 0)  
    elif op == "sw":
        address = riscv_register[parts[2]] + int(parts[3])
        
        # Check for memory access violation
        if not is_valid_memory_address(address):
            raise ValueError(f"Error: Data write to invalid memory location 0x{address:08X}")
            
        if address not in memory:  
            available_addr = get_available_memory()
            if available_addr is not None:
                memory[address] = memory[available_addr]  
                memory[available_addr] = 0  
        memory[address] = riscv_register[parts[1]]  

    riscv_register["x0"] = 0  # Always keep x0 as zero
    return new_pc

# Function to find whichever memory is available and has the lowerst value 
def get_available_memory():
    for addr in memory:
        if memory[addr] == 0: 
            return addr
    return None  # No available memory

def assign_addresses(instructions):
    return {i * 4: instructions[i] for i in range(len(instructions))}

def run_combined_process(input_file, output_file):
    binary_instructions = read_file(input_file)
    decoded_instructions = []
    
    try:
        for instr in binary_instructions:
            decoded_instructions.append(decode_instruction(instr))
    except ValueError as e:
        print(str(e))
        write_file(output_file, [str(e)])
        return
    
    address_map = assign_addresses(decoded_instructions)
    pc = 0
    output_lines = []
    first_execution = True 

    try:
        while pc in address_map:
            if not first_execution:  
                # converting values into 32 bit binary values 
                binary_values = f"{to_binary_32bit(pc)} " + " ".join(to_binary_32bit(riscv_register[f"x{i}"]) for i in range(32)) + " "
                output_lines.append(binary_values)

            first_execution = False 
            
            
            instruction = address_map[pc]
            new_pc = execute_instruction(instruction, pc)

            if new_pc is None:  # If halt detected, repeat last line
                output_lines.append(binary_values)
                print("Program terminated normally with halt instruction")
                break

            pc = new_pc  # Move to next instruction
    except ValueError as e:
        print(str(e))
        output_lines.append(str(e))
    
    
    for addr in sorted(memory.keys()):
        if 0x00010000 <= addr <= 0x0001007C:  # Only include addresses within this range as these are the only availiable data memory address
            output_lines.append(f"0x{addr:08X}:{to_binary_32bit(memory[addr])} ")


    write_file(output_file, output_lines)




input_filename = input("Enter input file name: ")
output_filename = input("Enter output file name: ")
run_combined_process(input_filename, output_filename)
print(f"Program executed and output written to '{output_filename}' successfully.")
